class Smartphone:
    def __init__(self, brand, model, storage, battery_life):
        self.brand = brand
        self.model = model
        self.storage = storage  
        self.battery_life = battery_life  
        self.__is_powered_on = False 

    def power_on(self):
        if not self.__is_powered_on:
            self.__is_powered_on = True
            print(f"{self.brand} {self.model} is now powered on.")
        else:
            print(f"{self.brand} {self.model} is already powered on.")

    def power_off(self):
        if self.__is_powered_on:
            self.__is_powered_on = False
            print(f"{self.brand} {self.model} is now powered off.")
        else:
            print(f"{self.brand} {self.model} is already powered off.")

    def __str__(self):
        return f"{self.brand} {self.model} - Storage: {self.storage}GB, Battery Life: {self.battery_life} hours"


class GamingSmartphone(Smartphone):
    def __init__(self, brand, model, storage, battery_life, gpu):
        super().__init__(brand, model, storage, battery_life)
        self.gpu = gpu 

    def play_game(self, game_name):
        print(f"Playing {game_name} on {self.brand} {self.model} with {self.gpu} GPU.")

    def __str__(self):
        return f"{super().__str__()}, GPU: {self.gpu}"


class CameraSmartphone(Smartphone):
    def __init__(self, brand, model, storage, battery_life, camera_megapixels):
        super().__init__(brand, model, storage, battery_life)
        self.camera_megapixels = camera_megapixels  

    def take_photo(self):
        print(f"Taking a photo with {self.camera_megapixels} MP camera on {self.brand} {self.model}.")

    def __str__(self):
        return f"{super().__str__()}, Camera: {self.camera_megapixels} MP"


basic_phone = Smartphone("Nokia", "3310", 0.5, 48)
gaming_phone = GamingSmartphone("Asus", "ROG Phone 6", 256, 12, "Adreno 730")
camera_phone = CameraSmartphone("Google", "Pixel 7", 128, 24, 50)

print(basic_phone)
basic_phone.power_on()
basic_phone.power_off()

print(gaming_phone)
gaming_phone.power_on()
gaming_phone.play_game("Genshin Impact")

print(camera_phone)
camera_phone.power_on()
camera_phone.take_photo()


question 2


class Vehicle:
    def __init__(self, name):
        self.name = name

    def move(self):
        raise NotImplementedError("Subclasses must implement the move() method.")


class Car(Vehicle):
    def move(self):
        print(f"{self.name} is driving üöó")


class Plane(Vehicle):
    def move(self):
        print(f"{self.name} is flying ‚úàÔ∏è")


class Boat(Vehicle):
    def move(self):
        print(f"{self.name} is sailing üö§")


class Bicycle(Vehicle):
    def move(self):
        print(f"{self.name} is pedaling üö≤")


def demonstrate_movement(vehicles):
    for vehicle in vehicles:
        vehicle.move()


car = Car("Tesla Model S")
plane = Plane("Boeing 747")
boat = Boat("Yacht")
bicycle = Bicycle("Mountain Bike")

vehicles = [car, plane, boat, bicycle]
demonstrate_movement(vehicles)

